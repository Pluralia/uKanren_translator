:: makeX res = conde
  (res === zero)
  (res === succ zero)

:: makeY x res = conde
  (res === x)
  (res === succ (succ zero))
  (res === succ (succ (succ zero)))

:: makeA res = conde
  (res === succ (succ (succ (succ zero))))
  (res === succ (succ (succ (succ (succ zero)))))

:: makeB res = conde
  (res === succ (succ (succ (succ (succ (succ zero))))))
  (res === succ (succ (succ (succ (succ (succ (succ zero)))))))

:: go l res = conde
  ([sec rest x y:
     l === succ zero % (sec % rest) /\
     {makeX x} /\
     {makeY x y} /\
     res === x % y % []])
  ([fir rest a b:
     l === fir % succ (succ zero) % rest /\
     {makeA a} /\
     {makeB b} /\
     res === a % b % []])

