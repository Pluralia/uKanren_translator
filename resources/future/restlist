----------------------------------------------------------------------------------------------------
-- predicates --------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

:: listo x = conde
  (
      x === [])
  ([h t:
      x === h % t
   /\ {listo t}])

:: membero x list =
  [h t:
    (list === h % t) /\ ((x === h) \/ {membero x t})]

:: inBotho x ys zs =
  {membero x ys} /\ {membero x zs}

:: nilo l =
  l === []

:: singletono l x =
  l === x % []

----------------------------------------------------------------------------------------------------
-- recursion-call of another functions -------------------------------------------------------------
----------------------------------------------------------------------------------------------------

:: maxLengtho x m l =
  {maxo x m} /\ {lengtho x l}

:: copycopy l l1 l2 =
  {copy l l1} /\ {copy2 l l2}

:: maxo x m =
  {maxo1 x zero m}

:: maxo1 x n m = conde
  (x ~ [] /\ m ~ n)
  ([h t z:
     x ~ h % t /\ {leo h n trueo} /\ {maxo1 t n m}])
  ([h t z:
     x ~ h % t /\ {gto h n trueo} /\ {maxo1 t h m}])

:: reverso x y = conde
  (x === [] /\ y === [])
  ([h t rt :
     x === h % t /\ {reverso t rt} /\ {appendo rt (h % []) y}])

----------------------------------------------------------------------------------------------------

