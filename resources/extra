:: appendoPat x y xy = conde
  (x === [] /\ xy === y)
  ([h t ty xx yy zz ww:
     x === ww /\ x === ((xx % yy) % zz) /\ x === h % t /\ xy === h % ty /\ {appendoPat t y ty}])

-----------------------------------------------------------------------------------------------------

:: appendoCtorsUnif x y xy = conde
  (x === [] /\ xy === y)
  ([h t ty:
     {appendoCtorsUnif t y ty} /\ x % xy % [] === (h % t) % (h % ty) % []])

-----------------------------------------------------------------------------------------------------

:: appendoAssign x y xy = conde
  (x === [] /\ xy === y)
  ([h t ty p ps c cs:
     x === h % t /\ xy === h % ty /\ xy === p % p % ps /\ xy === c % c % cs /\ {appendoAssign t y ty}])

-----------------------------------------------------------------------------------------------------

:: doubleAppendo x xy =
  {appendo x x xy}

-----------------------------------------------------------------------------------------------------

:: reversoRev x y = conde
  (x === [] /\ y === [])
  ([h t rt:
     x === h % t /\ {appendo rt (h % []) y} /\ {reversoRev t rt}])

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------

