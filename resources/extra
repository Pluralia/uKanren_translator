:: appendoPat x y xy = conde
  (x === [] /\ xy === y)
  ([h t ty xx yy zz ww:
     x === ww /\ x === ((xx % yy) % zz) /\ x === h % t /\ xy === h % ty /\ {appendoPat t y ty}])

-----------------------------------------------------------------------------------------------------

:: appendoCtorUnif x y xy = conde
  (x === [] /\ xy === y)
  ([h t ty:
     {appendoCtorUnif t y ty} /\ x % xy % [] === (h % t) % (h % ty) % []])

-----------------------------------------------------------------------------------------------------

:: appendoAssign x y xy = conde
  (x === [] /\ xy === y)
  ([h t ty p ps c cs:
     x === h % t /\ xy === h % ty /\ xy === p % p % ps /\ xy === c % c % cs /\ {appendoAssign t y ty}])

-----------------------------------------------------------------------------------------------------

:: doubleAppendo x xy =
  {appendo x x xy}

-----------------------------------------------------------------------------------------------------

:: reversoRev x y = conde
  (x === [] /\ y === [])
  ([h t rt:
     x === h % t /\ {appendo rt (h % []) y} /\ {reversoRev t rt}])

-----------------------------------------------------------------------------------------------------

:: eveno n res = conde
  (n === zero /\ res === succ zero)
  ([k:
     n === succ k /\ {oddo k res}])

:: oddo n res = conde
  (n === succ zero /\ res === succ zero)
  ([k:
     n === succ k /\ {eveno k res}])

-----------------------------------------------------------------------------------------------------

:: antiConso list x y = conde
  (list === [] /\ x === [] /\ y === [])
  ([h:
    list === h % y /\ x === (h % [])])

:: sndo list x =
  [x1 t1 t2:
    {antiConso list x1 t1} /\ {antiConso t1 x t2}]

-----------------------------------------------------------------------------------------------------

:: appStr h t y hty =
  {appendo (h % t) y hty}

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------

